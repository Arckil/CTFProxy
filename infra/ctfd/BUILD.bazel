load("@ctfd_pip//:requirements.bzl", "requirement")
load("@io_bazel_rules_docker//container:container.bzl", "container_image")
load("@io_bazel_rules_docker//python:image.bzl", "py_image")
load("@rules_python//python:defs.bzl", "py_library")
load("//:config.bzl", "CTF_DOMAIN")
load("//tools:challenge.bzl", "ctf_challenge")

ctf_challenge()

py_image(
    name = "base",
    srcs = ["run.py"],
    base = "@python2-base//image",
    main = "run.py",
    deps = [
        ":flaganizer_lib",
        "@ctfd//:app_lib",
        requirement("gunicorn"),
        requirement("setuptools"),
    ],
)

py_library(
    name = "flaganizer_lib",
    srcs = glob([
        "flaganizer/**/*.py",
    ]),
    data = glob(
        [
            "flaganizer/**",
        ],
        exclude = [
            "flaganizer/**/*.py",
        ],
    ),
)

container_image(
    name = "image",
    base = ":base",
    env = {
        "CACHE_DIR": "/data/cache",
        "CTF_DOMAIN": CTF_DOMAIN,
        # FIXME: configure DATABASE_URL and SECRET_KEY here
        "LOG_FOLDER": "/data/log",
        "PYTHONPATH": "/app/infra/ctfd/base.binary.runfiles/ctfd_pip_pypi__SQLAlchemy_1_3_11/SQLAlchemy-1.3.11.data/purelib",  # hack
        "UPLOAD_FOLDER": "/data/upload",
    },
    files = [
        "//jwtkeys:jwt.pub",
        "//third_party/ctfd:manage.py",
    ],
    symlinks = {
        "/app/infra/ctfd/base.binary.runfiles/ctfproxy/migrations": "/app/infra/ctfd/base.binary.runfiles/ctfd/migrations",
        "/app/infra/ctfd/base.binary.runfiles/ctfd/CTFd/plugins/flaganizer": "/app/infra/ctfd/base.binary.runfiles/ctfproxy/infra/ctfd/flaganizer",
    },
    visibility = ["//visibility:public"],
)
